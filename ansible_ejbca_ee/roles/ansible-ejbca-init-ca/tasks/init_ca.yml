---

#TODO
# Add /opt/ejbca-custom/conf directory if it doesn't exist

- name: Copy {{ item.caname }} Token properties file is copied over
  template:
    src: "catoken_template.properties.j2"
    dest: "{{ ejbca_home }}/conf/{{ item.caname }}.catoken.properties"
    owner: "{{ ejbca_user }}"
    group: "{{ ejbca_group }}"
  #when: item.tokentype == "org.cesecore.keys.token.PKCS11CryptoToken"
  no_log: true
  when: not_saas_deployment is defined

# SaaS Deployment Block
- name: Create and Copy catoken.properties file
  block:

    - name: Check for deployement cache directory
      stat:
        path: "{{ deployment_cache }}"

      register: token_props_dir
    
    - debug:
        var: token_props_dir

    - name: Create deployment cache directory
      file:
        path: "{{ deployment_cache }}"
        state: directory
      when: not token_props_dir.stat.exists

    - name: Template {{ item.caname }} Token properties file to local file    
      template:
        src: "catoken_template.properties.j2"
        dest: "{{ deployment_cache }}/{{ item.caname}}.catoken.properties"

    - name: Copy {{ item.came }} Token properties file to container
      shell: >
        cat "{{ deployment_cache }}/{{ item.caname}}.catoken.properties" | {{ container_cli }} "--" sh -c "cat > 
        {{ ejbca_home }}/conf/{{ item.caname}}.catoken.properties"
  
  when: saas_deployment is defined

- name: Init Root or Self Signed Issuing CA
  block:

    - name: Create {{ item.caname }}
      command: >
       "{{ ejbca_sh }}" ca init
       --caname "{{ item.caname }}"
       --dn "{{ item.dn }}"
       --tokenName {{ item.caname }}
       --tokenprop "{{ ejbca_home }}/conf/{{ item.caname }}.catoken.properties"
       {% for val in item.crypto_token %}{% if 'sign' == val.type %}
       --keyspec "{{ val.key_size }}"
       --keytype "{{ val.key_type }}" 
       {% endif %}{% endfor %}
       -s "{{ item.signalg }}" 
       -v "{{ item.validity }}"
       --policy "{{ item.policy }}"
       {% if item.subjectaltname is defined %}--subjectaltname "{{ item.subjectaltname }}" {% endif %}
       -certprofile "{{ item.certprofile }}"
      no_log: true
      become: yes
      become_user: "{{ ejbca_user }}"
      register: initializing_management_ca
      failed_when: initializing_management_ca.rc >= 2
      changed_when: initializing_management_ca.rc == 0

  when:
    - item.rootDn is not defined
    - saas_deployment is not defined

- name: Init Policy or Sub CA with local Root CA
  block:

    - name: Query CA ID of Root CA for {{ item.caname }}
      command: "{{ ejbca_home }}/../clientToolBox/ejbcaClientToolBox.sh CaIdGenerator '{{ item.rootDn }}'"
      args:
        chdir: "{{ ejbca_home }}/../clientToolBox"
      register: root_ca_id
      no_log: true
      become: yes
      become_user: "{{ ejbca_user }}"

    - name: Create {{ item.caname }}
      command: >
       "{{ ejbca_sh }}" ca init
       --caname "{{ item.caname }}"
       --dn "{{ item.dn }}"
       --tokenName {{ item.caname }}
       --tokenprop "{{ ejbca_home }}/conf/{{ item.caname }}.catoken.properties"
       {% for val in item.crypto_token %}{% if 'sign' == val.type %}
       --keyspec "{{ val.key_size }}"
       --keytype "{{ val.key_type }}" 
       {% endif %}{% endfor %}
       -s "{{ item.signalg }}"
       -v "{{ item.validity }}"
       --policy "{{ item.policy }}"
       {% if item.subjectaltname is defined %}--subjectaltname "{{ item.subjectaltname }}" {% endif %}
       -certprofile "{{ item.certprofile }}"
       --signedby "{{ root_ca_id.stdout }}"
      no_log: true
      become: yes
      become_user: "{{ ejbca_user }}"
      register: initializing_sub_ca
      failed_when: initializing_sub_ca.rc >= 2
      changed_when: initializing_sub_ca.rc == 0

  when: 
    - item.rootDn is defined
    - item.rootDn != "External"
    - saas_deployment is not defined

- name: Init CA to create a CSR to sign with an external Root CA
  block:

    - name: Download external CA chain for creating an External CA {{ item.caname }}
      uri:
        url: "{{ item.external_root_cachain_url }}"
        validate_certs: no
        dest: "/var/tmp/{{ item.external_root_cachain_file | basename }}"
        creates: "/var/tmp/{{ item.external_root_cachain_file | basename }}"
        owner: "{{ ejbca_user }}"
        group: "{{ ejbca_group }}"
      no_log: true
      when: not item.external_root_cachain_local_repository|bool

    - name: Upload external CA chain from Ansible controller for creating an External CA {{ item.caname }}
      copy:
        src: "{{ item.external_root_cachain_local_file }}"
        dest: "/var/tmp/{{ item.external_root_cachain_file | basename }}"
        owner: "{{ ejbca_user }}"
        group: "{{ ejbca_group }}"
      no_log: true
      when: item.external_root_cachain_local_repository|bool

    - name: Create a CA CSR to be signed by an external CA for {{ item.caname }}
      command: >
       {{ ejbca_sh }}" ca init
       --caname "{{ item.caname }}"
       --dn "{{ item.dn }}"
       --tokenName {{ item.crypto_token_name }}
       --tokenprop "{{ ejbca_home }}/conf/{{ item.caname }}.catoken.properties"
       {% for val in item.crypto_token %}{% if 'sign' == val.type %}
       --keyspec "{{ val.key_size }}"
       --keytype "{{ val.key_type }}" 
       {% endif %}{% endfor %}
       -s "{{ item.signalg }}" 
       -v "{{ item.validity }}"
       --policy "{{ item.policy }}"
       {% if item.subjectaltname is defined %}--subjectaltname "{{ item.subjectaltname }}" {% endif %}
       --signedby "{{ item.rootDn }}"
       -externalcachain "/var/tmp/{{ item.external_root_cachain_file | basename }}
      args:
        chdir: "{{ ejbca_home }}"
      no_log: true
      become: yes
      become_user: "{{ ejbca_user }}"
      register: initializing_sub_ca_csr
      failed_when: initializing_sub_ca_csr.rc >= 2
      changed_when: initializing_sub_ca_csr.rc == 0
      
    - name: Create local directories
      become: no
      file:
        path: "{{ ejbca_csr_dir_output }}"
        state: directory
      delegate_to: localhost

    - name: Copy the {{ item.caname }}_csr.der CSR locally 
      fetch:
        src: "{{ ejbca_home }}/{{ item.caname }}_csr.der"
        dest: "{{ ejbca_csr_dir_output }}/{{ item.caname }}_csr.der"
        flat: yes
      no_log: true
      register: copy_down_csr

  when: 
    - item.rootDn is defined
    - item.rootDn == "External"
    - saas_deployment is not defined

# SaaS Deployment Block
- name: Init Root or Self Signed Issuing CA
  block:

    - name: Create {{ item.caname }}
      command: >
       {{ ejbca_sh }} ca init
       --caname {{ item.caname }}
       --dn {{ item.dn }}
       --tokenName {{ item.crypto_token_name }}
       --tokenprop {{ ejbca_home }}/conf/{{ item.caname }}.catoken.properties
       {% for val in item.crypto_token %}{% if 'sign' == val.type %}
       --keyspec {{ val.key_size }}
       --keytype {{ val.key_type }}
       {% endif %}{% endfor %}
       -s {{ item.signalg }}
       -v {{ item.validity }}
       --policy {{ item.policy }}
       {% if item.subjectaltname is defined %}--subjectaltname {{ item.subjectaltname }} {% endif %}
       -certprofile {{ item.certprofile }}
      no_log: true
      register: initializing_management_ca
      failed_when: initializing_management_ca.rc >= 2
      changed_when: initializing_management_ca.rc == 0

    - debug:
        var: initializing_management_ca

  when:
    - item.rootDn is not defined
    - saas_deployment is defined

# SaaS Deployment Block
- name: Init CA to create a CSR to sign with an external Root CA
  block:

    - name: Upload external CA chain from Ansible controller for creating an External CA {{ item.caname }}
      shell: >
        cat "{{ ejbca_cacrt_dir_output }}/{{ root_ca_cert }}" | {{ container_cli }}  "--" sh -c "cat > /var/tmp/{{ root_ca_cert }}"

    - name: Create a CA CSR to be signed by an external CA for {{ item.caname }}
      command: >
       {{ ejbca_sh }} ca init
       --caname {{ item.caname }}
       --dn {{ item.dn }}
       --tokenName {{ item.crypto_token_name }}
       --tokenprop {{ ejbca_home }}/conf/{{ item.caname }}.catoken.properties
       {% for val in item.crypto_token %}{% if 'sign' == val.type %}
       --keyspec {{ val.key_size }}
       --keytype {{ val.key_type }}
       {% endif %}{% endfor %}
       -s {{ item.signalg }}
       -v {{ item.validity }}
       --policy {{ item.policy }}
       {% if item.subjectaltname is defined %}--subjectaltname {{ item.subjectaltname }} {% endif %}
       --signedby {{ item.rootDn }}
       -externalcachain /var/tmp/{{ root_ca_cert }}
      no_log: true
      register: initializing_sub_ca_csr
      failed_when: initializing_sub_ca_csr.rc >= 2
      changed_when: initializing_sub_ca_csr.rc == 0

    - debug:
        var: initializing_sub_ca_csr

    - name: Check for local CA CSRs directory
      stat:
        path: "{{ ejbca_csr_dir_output }}"
      register: ejbca_csr_dir_output_check
        
    - name: Create local CA CSRs directory
      file:
        path: "{{ ejbca_csr_dir_output }}"
        state: directory
      when: not ejbca_csr_dir_output_check.stat.exists

    - name: Copy the {{ item.caname }}_csr.der CSR locally 
      shell: >
        {{ container_cli }} -- cat /opt/primekey/{{ item.caname }}_csr.der > {{ ejbca_csr_dir_output }}/{{ item.caname }}_csr.der
      # no_log: true
      register: copy_down_csr

  when: 
    - item.rootDn is defined
    - item.rootDn == "External"
    - saas_deployment is defined